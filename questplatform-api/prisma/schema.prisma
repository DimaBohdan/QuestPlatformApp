// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(uuid()) @map("id")
  nickname        String  @unique
  username        String
  email           String  @unique
  avatar          String
  info            String?
  createdAt       DateTime @default(now())
  role            UserRole @default(USER)
  createdQuests   Quest[] @relation("UserCreatedQuests")
  completedQuests UserCompletedQuest[]
  completedQuestIds String[]
  achievements    Achievement[]
  reviews         QuestReview[]
  sentFriendRequests  Friendship[]    @relation("UserRequesterFriendships") 
  receivedFriendRequests Friendship[] @relation("UserReceiverFriendships")
  questProgress UserQuestProgress[]
}

model Friendship {
  requester   User   @relation(name: "UserRequesterFriendships", fields: [requesterId], references: [id], onDelete: Cascade)
  requesterId String
  receiver    User   @relation(name: "UserReceiverFriendships", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId  String
  status      Status  @default(PENDING)
  createdAt   DateTime @default(now())
  @@id([requesterId, receiverId])
  @@map("friendships")
}

model Quest {
  id          String     @id @default(uuid()) @map("id")
  title       String
  description String?       
  authorId    String
  author      User    @relation("UserCreatedQuests", fields: [authorId], references: [id], onDelete: Cascade)
  completedByUsers UserCompletedQuest[]
  time        Float?
  difficulty  Int
  category    Category
  tags        String[]       
  isPublic    Boolean     @default(false)
  rating      Float?
  tasks       QuestTask[]
  taskQuantity Int        @default(0)     
  previewImage MediaFile?
  reviews     QuestReview[]
  themeId     String?
  theme       QuestTheme? @relation(fields: [themeId], references: [id])
  createdAt   DateTime    @default(now())
  questProgress UserQuestProgress[]
}

enum UserRole {
  USER
  ADMIN
}

model UserCompletedQuest {
  userId  String
  questId String
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  quest   Quest @relation(fields: [questId], references: [id], onDelete: Cascade)

  @@id([userId, questId])
}

model QuestTask {
  id      String   @id @default(uuid())
  questId String
  quest   Quest    @relation(fields: [questId], references: [id], onDelete: Cascade)
  question String
  type    QuestTaskType
  media   MediaFile?
  order   Int
  isFinalized     Boolean @default(false)
  createdAt DateTime @default(now())
  options        Option[] @relation("QuestTaskOptions")   // SINGLE_CHOICE, MULTIPLE_CHOICE
  correctAnswers Option[] @relation("QuestTaskCorrectAnswers")  // SINGLE_CHOICE, MULTIPLE_CHOICE

  textAnswer     String[]    
  coordinate     Coordinate? @relation(name: "FindOnTaskPoints") // FIND_ON_MAP AND FIND_ON_PICTURE
  startNodeId    String?     
  startNode      PlotNode?   @relation(name: "StartNodeRelation")
  nodes          PlotNode[]  @relation(name: "NodesRelation")

  userAnswers    UserAnswer[] @relation("UserTaskAnswers")
  currentTaskUsers UserQuestProgress[] @relation("CurrentTaskProgress")

  @@unique([questId, order])
  @@map("quest_tasks")
}

model PlotNode {
  id         String   @id @default(uuid())
  taskId     String
  task        QuestTask? @relation(name: "NodesRelation", fields: [taskId], references: [id])
  text       String

  choices    PlotChoice[] @relation("PlotNodeChoice")
  plotNextChoice PlotChoice? @relation("PlotNextNodeChoices")
  taskStartId String?      @unique
  taskStartNode QuestTask? @relation(name: "StartNodeRelation", fields: [taskStartId], references: [id]) 

  @@map("plot_nodes")
}

model PlotChoice {
  id         String   @id @default(uuid())
  nodeId     String
  node       PlotNode @relation("PlotNodeChoice", fields: [nodeId], references: [id], onDelete: Cascade)
  text       String
  nextNodeId String?  @unique
  nextNode   PlotNode? @relation("PlotNextNodeChoices", fields: [nextNodeId], references: [id], onDelete: Cascade)
  userAnswers  UserAnswer[]

  @@map("plot_choices")
}

model Coordinate {
  id        String   @id @default(uuid())
  positionX Float
  positionY Float
  radius    Float @default(1)
  userAnswer           UserAnswer[]        @relation("UserAnswerSelectedCoords")
  findOnTaskId String? @unique
  findOnTask   QuestTask? @relation("FindOnTaskPoints", fields: [findOnTaskId], references: [id], onDelete: Cascade)

  @@map("coordinates")
}

enum QuestTaskType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TEXT_FIELD
  FIND_ON_PICTURE
  FIND_ON_MAP
  CHESSBOARD
  INTERACTIVE_PLOT
}

model UserQuestProgress {
  id         String   @id @default(uuid())
  userId     String
  user           User   @relation(fields: [userId], references: [id])
  questId    String
  quest      Quest    @relation(fields: [questId], references: [id])
  currentTaskId String?
  currentTask  QuestTask?   @relation(name: "CurrentTaskProgress", fields: [currentTaskId], references: [id])
  startTime   DateTime @default(now()) 
  completed   Boolean @default(false)
}

model MediaFile {
  id        String  @id @default(uuid())
  public_id String?  @unique
  url       String  @unique // Cloudinary / YouTube
  type      MediaFileType
  width     Int?   // IMAGES
  height    Int?   // IMAGES
  duration  Float? // VIDEOS

  task      QuestTask? @relation(fields: [taskId], references: [id])
  taskId    String?    @unique

  option    Option?    @relation(fields: [optionId], references: [id])
  optionId  String?    @unique    

  quest     Quest? @relation(fields: [questId], references: [id])
  questId   String?    @unique

  createdAt DateTime @default(now())

  @@map("media_files")
}

enum MediaFileType {
  IMAGE
  VIDEO
}

model Option {
  id       String       @id @default(uuid())
  text     String
  mediaId  String?
  media    MediaFile?
  createdAt DateTime @default(now())
  isCorrect Boolean  @default(false)
  taskId     String
  task      QuestTask @relation("QuestTaskOptions", fields: [taskId], references: [id])

  userAnswers UserAnswer[]  @relation("UserAnswerOptions")
  questTaskCorrectAnswers QuestTask[] @relation("QuestTaskCorrectAnswers")
}

model UserAnswer {
  id         String   @id @default(uuid())
  userId     String
  taskId     String
  task       QuestTask @relation(name: "UserTaskAnswers", fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  selectedOptions Option[] @relation("UserAnswerOptions") // SINGLE/MULTIPLE CHOICE
  textAnswer      String?  // TEXT_FIELD
  selectedCoordsId String? 
  selectedCoords  Coordinate? @relation("UserAnswerSelectedCoords", fields: [selectedCoordsId], references: [id], onDelete: SetNull)
  plotChoiceId    String? 
  plotChoice      PlotChoice? @relation(fields: [plotChoiceId], references: [id]) // PLOT_TASK

  @@map("user_answers")
}

model QuestReview {
  id        String   @id @default(uuid())
  score     Int
  comment   String?
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  questId   String
  quest     Quest    @relation(fields: [questId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model QuestTheme {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  background  String?
  textColor   String?
  fontStyle   String?
  script      String?
  quests      Quest[]
}

model Achievement {
  id         String   @id @default(uuid())
  title      String
  condition  Json
  users      User[]
}

enum Category {
  GAMES
  SPORT
  ANIME
  MANGA
  FILMS
  STUDY
  PSYCHOLOGY
  OTHER
}

enum Status {
  PENDING
  APPROVED
  DECLINED
}